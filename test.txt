import operator
import math
import random

import numpy

from deap import algorithms, base, creator, tools, gp

# Define new functions

def less_than(a: int, b: int) -> bool:
    return a < b

def greater_or_equal(a: int, b: int) -> bool:
    return a >= b

def greater_than(a: int, b: int) -> bool:
    return a > b

def if_then_else(condition: bool, true_branch: str, false_branch: str) -> str:
    """If-Then-Else function for GP."""
    return true_branch if condition else false_branch

pset = gp.PrimitiveSetTyped("MAIN", [int, int], str)  # Corrected to PrimitiveSetTyped
pset.addPrimitive(less_than, [int, int], bool, name="lt")  # Added type information
pset.addPrimitive(greater_or_equal, [int, int], bool, name="ge")
pset.addPrimitive(greater_than, [int, int], bool, name="gt")
pset.addPrimitive(if_then_else, [bool, str, str], str, name="if_then_else")

pset.renameArguments(ARG0='x')
pset.renameArguments(ARG1='i')

creator.create("FitnessMax", base.Fitness, weights=(1.0,))
creator.create("Individual", gp.PrimitiveTree, fitness=creator.FitnessMax)

toolbox = base.Toolbox()

toolbox.register("expr", gp.genHalfAndHalf, pset=pset, min_=1, max_=2)
toolbox.register("individual", tools.initIterate, creator.Individual, toolbox.expr)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)
toolbox.register("compile", gp.compile, pset=pset)

def evalSymbReg(individual, points):
    func = toolbox.compile(expr=individual)
    fitness = 0
    for x, i in points:  # Corrected argument order
        result = func(x, i)
        expected = "True" if x < i else "False"
        if result == expected:
            fitness += 1
    return fitness,

training_inputs = [(random.randint(0, 10), random.randint(0, 10)) for _ in range(40)]  # Modified training inputs

print(training_inputs)

toolbox.register("select", tools.selTournament, tournsize=3)

toolbox.register("mate", gp.cxOnePoint)

toolbox.register("expr_mut", gp.genFull, min_=0, max_=2)
toolbox.register("mutate", gp.mutUniform, expr=toolbox.expr_mut, pset=pset)

toolbox.decorate("mate", gp.staticLimit(key=operator.attrgetter("height"), max_value=17))
toolbox.decorate("mutate", gp.staticLimit(key=operator.attrgetter("height"), max_value=17))

def main():
    pop = toolbox.population(n=100)
    hof = tools.HallOfFame(1)

    stats_fit = tools.Statistics(lambda ind: ind.fitness.values[0])  # Corrected stats
    stats_size = tools.Statistics(len)
    mstats = tools.MultiStatistics(fitness=stats_fit, size=stats_size)
    mstats.register("avg", numpy.mean)
    mstats.register("std", numpy.std)
    mstats.register("min", numpy.min)
    mstats.register("max", numpy.max)

    pop, log = algorithms.eaSimple(pop, toolbox, 0.5, 0.1, 100, stats=mstats,
                                   halloffame=hof, verbose=True)

    for winner in hof:
        print(str(winner))

    return pop, log, hof

if __name__ == "__main__":
    main()